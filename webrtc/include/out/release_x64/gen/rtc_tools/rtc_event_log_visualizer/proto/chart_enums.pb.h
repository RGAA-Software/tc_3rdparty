// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chart_enums.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chart_5fenums_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chart_5fenums_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chart_5fenums_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chart_5fenums_2eproto {
  static const uint32_t offsets[];
};
namespace webrtc {
namespace analytics {
class ChartStyle;
struct ChartStyleDefaultTypeInternal;
extern ChartStyleDefaultTypeInternal _ChartStyle_default_instance_;
}  // namespace analytics
}  // namespace webrtc
PROTOBUF_NAMESPACE_OPEN
template<> ::webrtc::analytics::ChartStyle* Arena::CreateMaybeMessage<::webrtc::analytics::ChartStyle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace webrtc {
namespace analytics {

enum ChartStyle_Type : int {
  ChartStyle_Type_UNDEFINED = 0,
  ChartStyle_Type_LINE_CHART = 1,
  ChartStyle_Type_BAR_CHART = 2,
  ChartStyle_Type_LINE_STEP_CHART = 3,
  ChartStyle_Type_SCATTER_CHART = 4,
  ChartStyle_Type_ChartStyle_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ChartStyle_Type_ChartStyle_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ChartStyle_Type_IsValid(int value);
constexpr ChartStyle_Type ChartStyle_Type_Type_MIN = ChartStyle_Type_UNDEFINED;
constexpr ChartStyle_Type ChartStyle_Type_Type_MAX = ChartStyle_Type_SCATTER_CHART;
constexpr int ChartStyle_Type_Type_ARRAYSIZE = ChartStyle_Type_Type_MAX + 1;

const std::string& ChartStyle_Type_Name(ChartStyle_Type value);
template<typename T>
inline const std::string& ChartStyle_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChartStyle_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChartStyle_Type_Name.");
  return ChartStyle_Type_Name(static_cast<ChartStyle_Type>(enum_t_value));
}
bool ChartStyle_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChartStyle_Type* value);
// ===================================================================

class ChartStyle final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.analytics.ChartStyle) */ {
 public:
  inline ChartStyle() : ChartStyle(nullptr) {}
  ~ChartStyle() override;
  explicit PROTOBUF_CONSTEXPR ChartStyle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartStyle(const ChartStyle& from);
  ChartStyle(ChartStyle&& from) noexcept
    : ChartStyle() {
    *this = ::std::move(from);
  }

  inline ChartStyle& operator=(const ChartStyle& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartStyle& operator=(ChartStyle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ChartStyle& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartStyle* internal_default_instance() {
    return reinterpret_cast<const ChartStyle*>(
               &_ChartStyle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChartStyle& a, ChartStyle& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ChartStyle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartStyle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartStyle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartStyle>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChartStyle& from);
  void MergeFrom(const ChartStyle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChartStyle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webrtc.analytics.ChartStyle";
  }
  protected:
  explicit ChartStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ChartStyle_Type Type;
  static constexpr Type UNDEFINED =
    ChartStyle_Type_UNDEFINED;
  static constexpr Type LINE_CHART =
    ChartStyle_Type_LINE_CHART;
  static constexpr Type BAR_CHART =
    ChartStyle_Type_BAR_CHART;
  static constexpr Type LINE_STEP_CHART =
    ChartStyle_Type_LINE_STEP_CHART;
  static constexpr Type SCATTER_CHART =
    ChartStyle_Type_SCATTER_CHART;
  static inline bool Type_IsValid(int value) {
    return ChartStyle_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ChartStyle_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ChartStyle_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ChartStyle_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ChartStyle_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return ChartStyle_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:webrtc.analytics.ChartStyle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chart_5fenums_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChartStyle

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace analytics
}  // namespace webrtc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::webrtc::analytics::ChartStyle_Type> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chart_5fenums_2eproto
